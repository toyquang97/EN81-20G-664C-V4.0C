<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\G-664C-GS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\G-664C-GS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jan 25 15:04:52 2022
<BR><P>
<H3>Maximum Stack Usage =        480 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; standstill_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[38]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[84]">check_txa</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">write_errorhist</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">BOD_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from can.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">DMA_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT1_IRQHandler</a> from mcp2515.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT3_IRQHandler</a> from pos.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">ENET_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">QEI_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">RIT_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SPI_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from eeprom.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART0_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART3_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_lpc17xx.o(.ARM.__at_0x02FC) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.ARM.__at_0x02FC)
 <LI><a href="#[36]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[34]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[31]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[30]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[35]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a1]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a2]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[174]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[40]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[41]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[43]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[45]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1a4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[4f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[47]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[49]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4a]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[54]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1bb]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1bc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[1bf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1c0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[50]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; standstill_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[18a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[53]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[55]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[cb]"></a>DisableIrq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyChecksum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEData
</UL>

<P><STRONG><a name="[dd]"></a>EnableIrq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyChecksum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEData
</UL>

<P><STRONG><a name="[1c6]"></a>__WFI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__GoToUpgrade</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.emb_text), UNUSED)

<P><STRONG><a name="[57]"></a>door_open_state</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, door_op.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = door_open_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_groupcall
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.ARM.__at_0x02FC))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[60]"></a>arrival_state</STRONG> (Thumb, 926 bytes, Stack size 48 bytes, arrival.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = arrival_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_trip
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_call
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_speed
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ilu_ild
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cd]"></a>abs_val</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, call.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>clear_groupcall</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, call.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_stop_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
</UL>

<P><STRONG><a name="[5e]"></a>clearcalls</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = clearcalls &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doortest_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_call_priority
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_state
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_trip
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_call
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nosetup_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorturn_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[67]"></a>cancel_other_landing_call</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[b7]"></a>number_of_calls</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = number_of_calls
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_call_priority
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_trip
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
</UL>

<P><STRONG><a name="[69]"></a>calc_calltime</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_calltime
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_call_act_floor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_priority_call
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_call_below
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_call_above
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_groupcall
</UL>

<P><STRONG><a name="[6a]"></a>compare_group</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compare_group
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_priority_call
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_call_below
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_call_above
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_groupcall
</UL>

<P><STRONG><a name="[68]"></a>get_groupcall</STRONG> (Thumb, 236 bytes, Stack size 36 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_groupcall &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_group
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_calltime
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_call_below
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_call_above
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_call_below
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_call_above
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_act_floor
</UL>

<P><STRONG><a name="[1ce]"></a>get_calldoor</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, call.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>priority_call_above</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = priority_call_above &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_group
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_calltime
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_priority_call
</UL>

<P><STRONG><a name="[6c]"></a>priority_call_below</STRONG> (Thumb, 156 bytes, Stack size 36 bytes, call.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_group
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_calltime
</UL>

<P><STRONG><a name="[6d]"></a>search_priority_call</STRONG> (Thumb, 240 bytes, Stack size 44 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = search_priority_call &rArr; priority_call_above &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_call_above
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_group
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_calltime
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moving_call
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_call
</UL>

<P><STRONG><a name="[6e]"></a>call_act_floor</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = call_act_floor &rArr; get_groupcall &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_groupcall
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_standard_call
</UL>

<P><STRONG><a name="[6f]"></a>car_call_act_floor</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = car_call_act_floor &rArr; calc_calltime
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_calltime
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_standard_call
</UL>

<P><STRONG><a name="[70]"></a>up_call_above</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = up_call_above &rArr; get_groupcall &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_groupcall
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moving_call
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_standard_call
</UL>

<P><STRONG><a name="[71]"></a>down_call_below</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = down_call_below &rArr; get_groupcall &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_groupcall
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moving_call
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_standard_call
</UL>

<P><STRONG><a name="[72]"></a>down_call_above</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = down_call_above &rArr; get_groupcall &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_groupcall
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moving_call
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_standard_call
</UL>

<P><STRONG><a name="[73]"></a>up_call_below</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = up_call_below &rArr; get_groupcall &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_groupcall
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moving_call
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_standard_call
</UL>

<P><STRONG><a name="[74]"></a>search_standard_call</STRONG> (Thumb, 236 bytes, Stack size 12 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = search_standard_call &rArr; down_call_below &rArr; get_groupcall &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_call_below
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_call_above
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_call_below
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_call_above
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_call_act_floor
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_act_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_call
</UL>

<P><STRONG><a name="[75]"></a>search_call</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = search_call &rArr; search_standard_call &rArr; down_call_below &rArr; get_groupcall &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_standard_call
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_priority_call
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_call
</UL>

<P><STRONG><a name="[63]"></a>get_call</STRONG> (Thumb, 1272 bytes, Stack size 64 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = get_call &rArr; clearcalls &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_call
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
</UL>

<P><STRONG><a name="[76]"></a>get_moving_call</STRONG> (Thumb, 536 bytes, Stack size 36 bytes, call.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_moving_call &rArr; search_priority_call &rArr; priority_call_above &rArr; compare_group
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_call_below
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_call_above
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down_call_below
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up_call_above
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_priority_call
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
</UL>

<P><STRONG><a name="[b3]"></a>init_can_a</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_state
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcCanInit
</UL>

<P><STRONG><a name="[ea]"></a>init_can_b</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ese
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcCanInit
</UL>

<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 2420 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN_IRQHandler &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>set_out</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_c
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_b
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_a
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hse_out
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_control
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_outputs
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_call_priority
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_other_landing_call
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_call
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_doorstoppush
</UL>

<P><STRONG><a name="[7b]"></a>level_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = level_display &rArr; level_display_b &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display_b
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display_a
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_outputs
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_state
</UL>

<P><STRONG><a name="[58]"></a>send_hse_state</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_hse_state &rArr; send_hse_state_a &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state_b
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state_a
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doortest_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_stop_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nosetup_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorturn_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[80]"></a>send_message</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_cursorpos
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_cursortype
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sign
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ioenable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_iopolarity
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_iodata
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_write_request
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameter
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[81]"></a>transmit_sign</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = transmit_sign &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_lcd
</UL>

<P><STRONG><a name="[82]"></a>transmit_cursortype</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = transmit_cursortype &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_lcd
</UL>

<P><STRONG><a name="[83]"></a>transmit_cursorpos</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = transmit_cursorpos &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_lcd
</UL>

<P><STRONG><a name="[86]"></a>WriteCanA</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_drive_pos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_message_a
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_segment
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_response
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitoring_message_cana
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_position
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_emergency
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_load
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_inputs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_sdo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_a
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state_a
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display_a
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
</UL>

<P><STRONG><a name="[84]"></a>check_txa</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = check_txa &rArr;  write_errorhist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_drive_pos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_message_a
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_segment
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_response
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitoring_message_cana
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_position
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_emergency
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_load
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_inputs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_sdo
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_a
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state_a
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display_a
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
</UL>

<P><STRONG><a name="[85]"></a>abort_sdo</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = abort_sdo &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[87]"></a>ReadCanA</STRONG> (Thumb, 1434 bytes, Stack size 32 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ReadCanA &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_segment
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dict
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_segment
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dict
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handheld_key_read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_sdo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[8f]"></a>send_heartbeat_a</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = send_heartbeat_a &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_state
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>send_hse_state_a</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_hse_state_a &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
</UL>

<P><STRONG><a name="[90]"></a>send_nmt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_nmt &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_node
</UL>

<P><STRONG><a name="[91]"></a>transmit_sdo_req</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = transmit_sdo_req &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_node
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_nodestate
</UL>

<P><STRONG><a name="[92]"></a>transmit_sdo_seg</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = transmit_sdo_seg &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_node
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_nodestate
</UL>

<P><STRONG><a name="[93]"></a>transmit_inputs</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = transmit_inputs &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hse_inputs
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_state
</UL>

<P><STRONG><a name="[5d]"></a>door_command</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = door_command &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forced_closing
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doortest_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_park_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_door
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorturn_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_door
</UL>

<P><STRONG><a name="[95]"></a>transmit_load</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transmit_load &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hse_inputs
</UL>

<P><STRONG><a name="[96]"></a>transmit_emergency</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>

<P><STRONG><a name="[97]"></a>transmit_position</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, can_a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>

<P><STRONG><a name="[7c]"></a>level_display_a</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = level_display_a &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display
</UL>

<P><STRONG><a name="[98]"></a>monitoring_message_cana</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = monitoring_message_cana &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[99]"></a>sdo_response</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdo_response &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dict
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dict
</UL>

<P><STRONG><a name="[9a]"></a>sdo_segment</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdo_segment &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_segment
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_segment
</UL>

<P><STRONG><a name="[77]"></a>set_out_a</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_out_a &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>

<P><STRONG><a name="[9b]"></a>time_message_a</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = time_message_a &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[9c]"></a>send_drive_pos</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_drive_pos &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanA
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[9f]"></a>WriteCanB</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitoring_message_canb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_message_b
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt_ese
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_segment_b
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_response_b
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg_ese
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req_ese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_sdo_b
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_b
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state_b
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display_b
</UL>

<P><STRONG><a name="[9e]"></a>check_txb</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, can_b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitoring_message_canb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_message_b
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt_ese
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_segment_b
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_response_b
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg_ese
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req_ese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_sdo_b
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_b
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state_b
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display_b
</UL>

<P><STRONG><a name="[9d]"></a>abort_sdo_b</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = abort_sdo_b &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
</UL>

<P><STRONG><a name="[a0]"></a>ReadCanB</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ReadCanB &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hallcall_c
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_sdo_b
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_segment
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dict
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_segment
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dict
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handheld_key_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[a2]"></a>transmit_sdo_req_ese</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = transmit_sdo_req_ese &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ese
</UL>

<P><STRONG><a name="[a3]"></a>transmit_sdo_seg_ese</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = transmit_sdo_seg_ese &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ese
</UL>

<P><STRONG><a name="[a4]"></a>sdo_response_b</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sdo_response_b &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dict
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dict
</UL>

<P><STRONG><a name="[a5]"></a>sdo_segment_b</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sdo_segment_b &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_segment
</UL>

<P><STRONG><a name="[a6]"></a>send_nmt_ese</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = send_nmt_ese &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ese
</UL>

<P><STRONG><a name="[7d]"></a>level_display_b</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = level_display_b &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display
</UL>

<P><STRONG><a name="[78]"></a>set_out_b</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_out_b &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>

<P><STRONG><a name="[c2]"></a>send_heartbeat_b</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_heartbeat_b
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[7f]"></a>send_hse_state_b</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send_hse_state_b &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
</UL>

<P><STRONG><a name="[a7]"></a>time_message_b</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = time_message_b &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[a8]"></a>monitoring_message_canb</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, can_b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = monitoring_message_canb &rArr; WriteCanB
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanB
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[a9]"></a>init_can_c</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_can_c &rArr; mcp2515_can_init &rArr; mcp2515_modify_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcCanInit
</UL>

<P><STRONG><a name="[ab]"></a>ReadCanC</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, can_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ReadCanC &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[ac]"></a>check_txc</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, can_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat_c
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hallcall_c
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_c
</UL>

<P><STRONG><a name="[ad]"></a>WriteCanC</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, can_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WriteCanC &rArr; mcp2515_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_modify_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hallcall_c
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_c
</UL>

<P><STRONG><a name="[b0]"></a>send_heartbeat_c</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, can_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = send_heartbeat_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_modify_reg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[79]"></a>set_out_c</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, can_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txc
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>

<P><STRONG><a name="[a1]"></a>set_hallcall_c</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, can_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_hallcall_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanC
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hse_inputs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
</UL>

<P><STRONG><a name="[1cf]"></a>clear_rxc_buffer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, can_c.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>clear_txc_buffer</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, can_c.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>gse</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, can_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gse &rArr; mcp2515_can_init &rArr; mcp2515_modify_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[1d1]"></a>clear_rxa_buffer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, can_err.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>clear_sxa_buffer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, can_err.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>clear_txa_buffer</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, can_err.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>can_error_state</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, can_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = can_error_state &rArr; search_state &rArr; search_nodestate &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_state
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat_a
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_a
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>read_hse_inputs</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, cycle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = read_hse_inputs &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hallcall_c
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_load
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_inputs
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[1d4]"></a>check_for_call</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cycle.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>hse_out</STRONG> (Thumb, 832 bytes, Stack size 28 bytes, cycle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hse_out
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>

<P><STRONG><a name="[b9]"></a>get_firealarmfloor</STRONG> (Thumb, 246 bytes, Stack size 36 bytes, cycle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_firealarmfloor
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_call_priority
</UL>

<P><STRONG><a name="[94]"></a>forced_closing</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cycle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
</UL>

<P><STRONG><a name="[d4]"></a>start_enabled</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cycle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relevelling
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
</UL>

<P><STRONG><a name="[b8]"></a>check_up_down_peak</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, cycle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_up_down_peak
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_call_priority
</UL>

<P><STRONG><a name="[b6]"></a>set_call_priority</STRONG> (Thumb, 3358 bytes, Stack size 48 bytes, cycle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = set_call_priority &rArr; clearcalls &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_up_down_peak
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firealarmfloor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_of_calls
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[ba]"></a>set_outputs</STRONG> (Thumb, 2148 bytes, Stack size 48 bytes, cycle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_outputs &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[c6]"></a>Limitcall</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, cycle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Limitcall
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[1d5]"></a>check_floorrecord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cycle.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>cycle</STRONG> (Thumb, 2940 bytes, Stack size 48 bytes, cycle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tse
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_control
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_drive
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ese
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_nice5000
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UCMP
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParaData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwitch
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadValue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentTemperature
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChecksum
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductNiceSpiData
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrWdt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limitcall
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_outputs
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_call_priority
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hse_inputs
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gse
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat_c
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanC
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitoring_message_canb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_message_b
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat_b
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_drive_pos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_message_a
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitoring_message_cana
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_inputs
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_sdo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_a
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doortest_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_state
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_state
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_stop_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nosetup_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultstate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nice5000
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_node
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorturn_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shaft_switch
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_nodestate
</UL>

<P><STRONG><a name="[8c]"></a>read_dict</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, dict.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_dict &rArr; sdo_response &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_response_b
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_response
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
</UL>

<P><STRONG><a name="[8d]"></a>read_segment</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, dict.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = read_segment &rArr; sdo_segment &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
</UL>

<P><STRONG><a name="[d0]"></a>clear_ese</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, dict.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_ese
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dict
</UL>

<P><STRONG><a name="[8a]"></a>write_dict</STRONG> (Thumb, 668 bytes, Stack size 40 bytes, dict.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_dict &rArr; sdo_response &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nice5000_parameter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;niv_addr_match
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ese
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_response_b
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_response
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
</UL>

<P><STRONG><a name="[8b]"></a>write_segment</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, dict.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_segment &rArr; sdo_segment &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_segment_b
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdo_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
</UL>

<P><STRONG><a name="[d3]"></a>diving_state</STRONG> (Thumb, 1140 bytes, Stack size 48 bytes, diving.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = diving_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_target
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_enabled
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ilu_ild
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>doortest_state</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, doortest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = doortest_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>set_contactor</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, drive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_contactor
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_nice5000
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
</UL>

<P><STRONG><a name="[d6]"></a>start_drive</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, drive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relevelling
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorturn_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[5a]"></a>emergency_stop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = emergency_stop &rArr; set_contactor
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contactor
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doortest_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UCMP
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_speed
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relevelling
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorturn_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[df]"></a>stop_drive</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relevelling
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[da]"></a>drive_error_state</STRONG> (Thumb, 832 bytes, Stack size 40 bytes, drv_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = drive_error_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNiceFaultChked
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_groupcall
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>ReadEEData</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadEEData
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyChecksum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[dc]"></a>WriteEEData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteEEData
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParaData
</UL>

<P><STRONG><a name="[c7]"></a>WriteParaData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteParaData &rArr; WriteEEData
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEEData
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
</UL>

<P><STRONG><a name="[de]"></a>em_op_state</STRONG> (Thumb, 996 bytes, Stack size 64 bytes, em_op.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = em_op_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_drive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrWdt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>motorturn_state</STRONG> (Thumb, 524 bytes, Stack size 40 bytes, em_op.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = motorturn_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>error_relev</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, err_rel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = error_relev &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_enabled
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_park_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_door
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relevelling
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_call
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>error_state</STRONG> (Thumb, 2006 bytes, Stack size 64 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = error_state &rArr; search_state &rArr; search_nodestate &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParaData
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_state
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_groupcall
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMax
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>clear_rxb_buffer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ese.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>clear_sxb_buffer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ese.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>clear_txb_buffer</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, ese.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clear_txb_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ese
</UL>

<P><STRONG><a name="[1d8]"></a>request_ese_io</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ese.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>ese</STRONG> (Thumb, 1676 bytes, Stack size 40 bytes, ese.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt_ese
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg_ese
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req_ese
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_b
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_state
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_txb_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[ec]"></a>evacuation_state</STRONG> (Thumb, 930 bytes, Stack size 64 bytes, evac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = evacuation_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_drive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ilu_ild
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_target_floor_ups
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_door
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>request_exe_io</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, exe.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>exe</STRONG> (Thumb, 1276 bytes, Stack size 24 bytes, exe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = exe &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt_ese
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg_ese
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req_ese
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_state
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[ee]"></a>hb_error_state</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, hb_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = hb_error_state &rArr; search_state &rArr; search_nodestate &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_state
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_groupcall
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>write_errorhist</STRONG> (Thumb, 834 bytes, Stack size 32 bytes, history.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_emergency
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNiceFaultChked
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_nice5000
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_UCMP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductNiceSpiData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat_a
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_txa
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_speed
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ilu_ild
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relevelling
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[161]"></a>RecordErrorStatus</STRONG> (Thumb, 440 bytes, Stack size 12 bytes, history.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RecordErrorStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_nice5000
</UL>

<P><STRONG><a name="[108]"></a>GetBriefHist</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, history.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetBriefHist
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
</UL>

<P><STRONG><a name="[ef]"></a>write_io</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, hwtest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_io
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_function_number
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[f1]"></a>hwtest</STRONG> (Thumb, 2900 bytes, Stack size 72 bytes, hwtest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = hwtest &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotoxy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcuConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_io
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[163]"></a>iic_read</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iic_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRtc
</UL>

<P><STRONG><a name="[162]"></a>iic_write</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRtc
</UL>

<P><STRONG><a name="[fa]"></a>init_node</STRONG> (Thumb, 622 bytes, Stack size 56 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = init_node &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
</UL>

<P><STRONG><a name="[fb]"></a>ini_state</STRONG> (Thumb, 546 bytes, Stack size 48 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ini_state &rArr; init_nice5000 &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nice5000_parameter
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nice5000
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_node
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>send_parameter</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = send_parameter &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nice5000_parameter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[fe]"></a>send_write_request</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = send_write_request &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[ff]"></a>send_iodata</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = send_iodata &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[100]"></a>send_iopolarity</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = send_iopolarity &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[101]"></a>send_ioenable</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = send_ioenable &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[88]"></a>handle_input</STRONG> (Thumb, 6624 bytes, Stack size 56 bytes, input.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_of_calls
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_other_landing_call
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ese
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hse_inputs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanC
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shaft_switch
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_nodestate
</UL>

<P><STRONG><a name="[102]"></a>inspection_state</STRONG> (Thumb, 910 bytes, Stack size 48 bytes, insp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = inspection_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_drive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrWdt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>SetLed</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>SetSwitch</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
</UL>

<P><STRONG><a name="[5f]"></a>fan_on</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fan_on &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_state
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[8e]"></a>handheld_key_read</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanB
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
</UL>

<P><STRONG><a name="[149]"></a>get_key</STRONG> (Thumb, 168 bytes, Stack size 4 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[bb]"></a>ClrWdt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultPara
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyChecksum
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitParameter
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_parameter
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[16a]"></a>DispDigitLED</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispDigitLED
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>BoardKeyProc</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>RenderLedDisplay</STRONG> (Thumb, 2342 bytes, Stack size 56 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = RenderLedDisplay &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
</UL>

<P><STRONG><a name="[cd]"></a>ConductLedDisplay</STRONG> (Thumb, 4024 bytes, Stack size 56 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ConductLedDisplay &rArr; RenderLedDisplay &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nice5000_parameter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_parameter
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAddrByReadPara
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderLedDisplay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBriefHist
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[f2]"></a>gotoxy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[f7]"></a>display</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = display
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_calls
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pcb_number
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pcb_status
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iopara_detail
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_io
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paralist
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paravalue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_listpara
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_error
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_line
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_standardtext
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearline
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[f3]"></a>clrscr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pcb_number
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iopara_detail
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_io
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paralist
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_standardtext
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[10a]"></a>clearline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clearline &rArr; display
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[f9]"></a>cursor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[10b]"></a>transmit_lcd</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = transmit_lcd &rArr; transmit_sign &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_cursorpos
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_cursortype
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>display_standardtext</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = display_standardtext &rArr; display
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[10d]"></a>display_line</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = display_line &rArr; display
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[10e]"></a>display_error</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = display_error &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
</UL>

<P><STRONG><a name="[10f]"></a>display_menu</STRONG> (Thumb, 116 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = display_menu &rArr; display
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[110]"></a>get_tablesize</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[111]"></a>get_stringnumber</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_stringnumber &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_iopara
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_listpara
</UL>

<P><STRONG><a name="[1da]"></a>bitpos</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>change_listpara</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stringnumber
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[113]"></a>next_sign</STRONG> (Thumb, 76 bytes, Stack size 104 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = next_sign &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[115]"></a>display_paravalue</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = display_paravalue &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paralist
</UL>

<P><STRONG><a name="[119]"></a>display_paralist</STRONG> (Thumb, 640 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = display_paralist &rArr; display_paravalue &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paravalue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[11a]"></a>display_hist_detail</STRONG> (Thumb, 1366 bytes, Stack size 96 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = display_hist_detail &rArr; display_error &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_error
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[11d]"></a>get_iotype_number</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_iotype_number
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iopara_detail
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_iopara
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accesstype
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_min_max
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_io
</UL>

<P><STRONG><a name="[14c]"></a>get_doortext_number</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[f0]"></a>get_function_number</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iopara_detail
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_iopara
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accesstype
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_io
</UL>

<P><STRONG><a name="[11c]"></a>display_io</STRONG> (Thumb, 1298 bytes, Stack size 88 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = display_io &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iotype_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[153]"></a>get_iopara</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_iopara
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[152]"></a>check_iopara</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_iopara
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[154]"></a>set_callpara</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_callpara
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[155]"></a>write_iopara</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_iopara
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[11e]"></a>check_min_max</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_min_max &rArr; get_iotype_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iotype_number
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[1db]"></a>get_detail_para</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>check_accesstype</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = check_accesstype &rArr; get_iotype_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iotype_number
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_function_number
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[120]"></a>change_iopara</STRONG> (Thumb, 920 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = change_iopara &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iotype_number
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stringnumber
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_function_number
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[122]"></a>iopara_detail</STRONG> (Thumb, 704 bytes, Stack size 88 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = iopara_detail &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iotype_number
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_function_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[156]"></a>get_pcb_hb_status</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[123]"></a>display_pcb_status</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = display_pcb_status &rArr; display
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[f5]"></a>GetLcuConfig</STRONG> (Thumb, 178 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetLcuConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pcb_number
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[124]"></a>display_pcb_number</STRONG> (Thumb, 268 bytes, Stack size 72 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = display_pcb_number &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLcuConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[157]"></a>GetIDDispBuffer</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetIDDispBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[125]"></a>GetLoadVoltageBuff</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GetLoadVoltageBuff &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[151]"></a>search_submenu</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = search_submenu
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[14a]"></a>search_mainmenu</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[14b]"></a>search_row</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = search_row
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[15c]"></a>search_paranumber</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = search_paranumber
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[127]"></a>display_calls</STRONG> (Thumb, 722 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = display_calls &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[cc]"></a>GetLoadValue</STRONG> (Thumb, 412 bytes, Stack size 20 bytes, load.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetLoadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[129]"></a>IsrSet</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcCanInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcI2cInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcTimerInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcPinInit
</UL>

<P><STRONG><a name="[12b]"></a>delay</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_can_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_config_rate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_reset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcSpiInit
</UL>

<P><STRONG><a name="[134]"></a>LpcCpuInit</STRONG> (Thumb, 200 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LpcCpuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>LpcPinInit</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LpcPinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>LpcSpiInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LpcSpiInit &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>LpcTimerInit</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LpcTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>LpcUartInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>LpcI2cInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LpcI2cInit &rArr; InitRtc &rArr; iic_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRtc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrSet
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>LpcCanInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_c
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_b
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_a
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrSet
</UL>

<P><STRONG><a name="[131]"></a>InitVariables</STRONG> (Thumb, 1120 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitVariables &rArr; ReadEEData
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParaData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_floorhigth
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>InitParameter</STRONG> (Thumb, 1240 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrWdt
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>main</STRONG> (Thumb, 926 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = main &rArr; standstill_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doortest_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrWdt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_state
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_state
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_c
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_b
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_a
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_stop_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nosetup_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultstate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyChecksum
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitParameter
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcI2cInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcTimerInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcSpiInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcPinInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcCpuInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsrSet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorturn_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[141]"></a>WriteSpiByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mcp2515.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_modify_reg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_can_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_recv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_write_regs
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read_regs
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read_status
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_config_rate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_reset
</UL>

<P><STRONG><a name="[144]"></a>ReadSpiByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcp2515.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_recv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read_status
</UL>

<P><STRONG><a name="[140]"></a>mcp2515_reset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mcp2515.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[142]"></a>mcp2515_config_rate</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mcp2515.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[143]"></a>mcp2515_read_status</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, mcp2515.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpiByte
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
</UL>

<P><STRONG><a name="[145]"></a>mcp2515_read_regs</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mcp2515_read_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>mcp2515_write_regs</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, mcp2515.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
</UL>

<P><STRONG><a name="[af]"></a>mcp2515_modify_reg</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mcp2515_modify_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_can_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat_c
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanC
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>mcp2515_recv</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mcp2515_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSpiByte
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>mcp2515_send</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mcp2515_send
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat_c
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCanC
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>mcp2515_can_init</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mcp2515_can_init &rArr; mcp2515_modify_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_modify_reg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gse
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can_c
</UL>

<P><STRONG><a name="[21]"></a>EINT1_IRQHandler</STRONG> (Thumb, 948 bytes, Stack size 64 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EINT1_IRQHandler &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_modify_reg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_recv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read_regs
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSpiByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[148]"></a>menu</STRONG> (Thumb, 25010 bytes, Stack size 56 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = menu &rArr; change_iopara &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nice5000_parameter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParaData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sign
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor_name_change
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_double_door
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_botfloor_change
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultPara
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_calls
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_paranumber
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_row
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_mainmenu
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_submenu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadVoltageBuff
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIDDispBuffer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pcb_number
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pcb_status
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pcb_hb_status
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iopara_detail
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_iopara
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_accesstype
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_min_max
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_iopara
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_callpara
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_iopara
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_iopara
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_io
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_doortext_number
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paralist
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_sign
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_error
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_line
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_standardtext
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearline
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_parameter
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ioenable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_iopolarity
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_iodata
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_write_request
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameter
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotoxy
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrscr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_io
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>moving_state</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, moving.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = moving_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_moving_call
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_trip
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_speed
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ilu_ild
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>CrcChkValue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nice5000.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>GetNiceFault</STRONG> (Thumb, 558 bytes, Stack size 0 bytes, nice5000.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductNiceSpiData
</UL>

<P><STRONG><a name="[15f]"></a>GetNiceTivPara</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, nice5000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetNiceTivPara
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductNiceSpiData
</UL>

<P><STRONG><a name="[15e]"></a>Load_pos</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nice5000.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNiceStatus
</UL>

<P><STRONG><a name="[15d]"></a>GetNiceStatus</STRONG> (Thumb, 488 bytes, Stack size 28 bytes, nice5000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetNiceStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductNiceSpiData
</UL>

<P><STRONG><a name="[c0]"></a>ConductNiceSpiData</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, nice5000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ConductNiceSpiData &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNiceStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNiceTivPara
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNiceFault
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[1dd]"></a>ResetNiceFaultChk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nice5000.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>IsNiceFaultChked</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nice5000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IsNiceFaultChked &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
</UL>

<P><STRONG><a name="[fc]"></a>init_nice5000</STRONG> (Thumb, 810 bytes, Stack size 80 bytes, nice5000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = init_nice5000 &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
</UL>

<P><STRONG><a name="[c1]"></a>drive_nice5000</STRONG> (Thumb, 3920 bytes, Stack size 40 bytes, nice5000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drive_nice5000 &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contactor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordErrorStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_target_floor_ups
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[d1]"></a>niv_addr_match</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nice5000.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dict
</UL>

<P><STRONG><a name="[d2]"></a>send_nice5000_parameter</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nice5000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_nice5000_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dict
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_parameter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ini_state
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shaft_switch
</UL>

<P><STRONG><a name="[109]"></a>GetAddrByReadPara</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, nice5000.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
</UL>

<P><STRONG><a name="[1de]"></a>GetTivPtrByAddr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nice5000.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>nosetup_state</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, no_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = nosetup_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>random</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_trip
</UL>

<P><STRONG><a name="[f6]"></a>trim</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = trim &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pcb_number
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[e7]"></a>GetMin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
</UL>

<P><STRONG><a name="[e8]"></a>GetMax</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
</UL>

<P><STRONG><a name="[23]"></a>EINT3_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, pos.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>check_ilu_ild</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_ilu_ild &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relevelling
</UL>

<P><STRONG><a name="[d5]"></a>get_max_target</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
</UL>

<P><STRONG><a name="[ce]"></a>check_UCMP</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, pos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = check_UCMP &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[62]"></a>check_speed</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, pos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = check_speed &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
</UL>

<P><STRONG><a name="[ed]"></a>get_target_floor_ups</STRONG> (Thumb, 416 bytes, Stack size 36 bytes, pos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_target_floor_ups
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_nice5000
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
</UL>

<P><STRONG><a name="[e5]"></a>relevelling</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, relev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = relevelling &rArr; check_ilu_ild &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_drive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_enabled
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ilu_ild
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
</UL>

<P><STRONG><a name="[139]"></a>reset_trip_state</STRONG> (Thumb, 1108 bytes, Stack size 40 bytes, res_trip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = reset_trip_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_drive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_enabled
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ilu_ild
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>InitRtc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitRtc &rArr; iic_read
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcI2cInit
</UL>

<P><STRONG><a name="[c5]"></a>GetRtc</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetRtc &rArr; iic_read
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>SetRtc</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetRtc &rArr; iic_write
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[137]"></a>sc_error_state</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, sc_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = sc_error_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_groupcall
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>set_parameter</STRONG> (Thumb, 4206 bytes, Stack size 40 bytes, set_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_parameter &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrWdt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyChecksum
</UL>

<P><STRONG><a name="[14e]"></a>config_double_door</STRONG> (Thumb, 528 bytes, Stack size 36 bytes, set_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_double_door
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[150]"></a>floor_name_change</STRONG> (Thumb, 406 bytes, Stack size 20 bytes, set_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = floor_name_change
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[14f]"></a>config_botfloor_change</STRONG> (Thumb, 580 bytes, Stack size 36 bytes, set_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = config_botfloor_change
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[e2]"></a>new_call</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sp_trip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_trip
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
</UL>

<P><STRONG><a name="[66]"></a>special_trip</STRONG> (Thumb, 1442 bytes, Stack size 40 bytes, sp_trip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = special_trip &rArr; clearcalls &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_of_calls
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_call
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
</UL>

<P><STRONG><a name="[13d]"></a>start_trip_state</STRONG> (Thumb, 1272 bytes, Stack size 40 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = start_trip_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_target
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteParaData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_trip
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_call
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>set_out_state</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_out_state &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_inputs
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ese
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_state
</UL>

<P><STRONG><a name="[5c]"></a>set_state</STRONG> (Thumb, 1540 bytes, Stack size 40 bytes, state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = set_state &rArr; emergency_stop &rArr; set_contactor
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_drive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doortest_state
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_open_state
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_state
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrival_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_stop_state
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_state
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nosetup_state
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving_state
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultstate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inspection_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorturn_state
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_op_state
</UL>

<P><STRONG><a name="[13f]"></a>defaultstate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = defaultstate &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>request_io</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, state.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>search_nodestate</STRONG> (Thumb, 788 bytes, Stack size 48 bytes, state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = search_nodestate &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_state
</UL>

<P><STRONG><a name="[b4]"></a>search_state</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = search_state &rArr; search_nodestate &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_state
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_nodestate
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_state
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
</UL>

<P><STRONG><a name="[e3]"></a>set_door</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, still.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_door &rArr; door_command &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evacuation_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_doorstoppush
</UL>

<P><STRONG><a name="[166]"></a>fire_door</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, still.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fire_door &rArr; door_command &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
</UL>

<P><STRONG><a name="[e4]"></a>set_park_state</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, still.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_park_state &rArr; door_command &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
</UL>

<P><STRONG><a name="[d7]"></a>handle_dooropenpush</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, still.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = handle_dooropenpush &rArr; fire_door &rArr; door_command &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_door
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_door
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_error_state
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diving_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_trip_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_error_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trip_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_error_state
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_state
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_relev
</UL>

<P><STRONG><a name="[167]"></a>handle_doorstoppush</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, still.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = handle_doorstoppush &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_door
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standstill_state
</UL>

<P><STRONG><a name="[1e0]"></a>she_parkdoor</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, still.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>standstill_state</STRONG> (Thumb, 6882 bytes, Stack size 152 bytes, still.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = standstill_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dooropenpush
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSwitch
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forced_closing
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_of_calls
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;special_trip
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_call
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_park_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_door
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relevelling
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_doorstoppush
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_door
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>set_shaft_switch</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, teach.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = set_shaft_switch &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nice5000_parameter
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teach_in_state
</UL>

<P><STRONG><a name="[13e]"></a>teach_in_state</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, teach.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = teach_in_state &rArr; set_shaft_switch &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nice5000_parameter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;level_display
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_shaft_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>GetCurrentTemperature</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetCurrentTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[136]"></a>terminal_state</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, term.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = terminal_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_drive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_drive
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearcalls
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>io_para_valid</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>AddChksum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, test.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>GetChecksum</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[135]"></a>VerifyChecksum</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VerifyChecksum &rArr; set_parameter &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEEData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrWdt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_parameter
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>set_floorhigth</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultPara
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
</UL>

<P><STRONG><a name="[158]"></a>LoadDefaultPara</STRONG> (Thumb, 4006 bytes, Stack size 40 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LoadDefaultPara &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrWdt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_floorhigth
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[cf]"></a>handle_drive</STRONG> (Thumb, 770 bytes, Stack size 4 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = handle_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[bc]"></a>pos_control</STRONG> (Thumb, 1836 bytes, Stack size 48 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pos_control &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 1496 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIMER0_IRQHandler &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 1706 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TIMER1_IRQHandler &rArr; transmit_lcd &rArr; transmit_sign &rArr; send_message &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_lcd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardKeyProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispDigitLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = TIMER2_IRQHandler &rArr; menu &rArr; change_iopara &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat_a
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_errorhist
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrcChkValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e3]"></a>request_tse_io</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tse.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>tse</STRONG> (Thumb, 1260 bytes, Stack size 24 bytes, tse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tse &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_seg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sdo_req
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nmt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_out_state
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[13b]"></a>wait_for_stop_state</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wait.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = wait_for_stop_state &rArr; cycle &rArr; ese &rArr; handle_input &rArr; cancel_other_landing_call &rArr; set_out &rArr; set_out_c &rArr; check_txc &rArr; write_errorhist &rArr; transmit_emergency &rArr; WriteCanA
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_groupcall
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_hse_state
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_calls
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadVoltageBuff
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pcb_number
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iopara_detail
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_iopara
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_io
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paralist
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paravalue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_listpara
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_error
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderLedDisplay
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nice5000
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[16f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[170]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[16e]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[42]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[121]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_iopara
</UL>

<P><STRONG><a name="[176]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[f8]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtest
</UL>

<P><STRONG><a name="[106]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iopara_detail
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_iopara
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_io
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paravalue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_listpara
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stringnumber
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tablesize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_error
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderLedDisplay
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trim
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_sign
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCanA
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultPara
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyChecksum
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_parameter
</UL>

<P><STRONG><a name="[178]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1e8]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDefaultPara
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyChecksum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVariables
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpcI2cInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_parameter
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[17a]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[17c]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[171]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1eb]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[16d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[30]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[186]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[44]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[46]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[177]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[175]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[31]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1ec]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[35]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[185]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[187]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[17e]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ee]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ef]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[188]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[52]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[191]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[56]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1f0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18c]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[18b]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[18d]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[18e]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[180]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[181]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18f]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[104]"></a>__ARM_common_memclr4_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, io.o(i.__ARM_common_memclr4_8))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderLedDisplay
</UL>

<P><STRONG><a name="[105]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, io.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConductLedDisplay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RenderLedDisplay
</UL>

<P><STRONG><a name="[184]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[173]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[15a]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[4b]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[36]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[192]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[1f1]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[193]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[196]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[190]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadVoltageBuff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paravalue
</UL>

<P><STRONG><a name="[194]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[197]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadVoltageBuff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paravalue
</UL>

<P><STRONG><a name="[19a]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[19b]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadVoltageBuff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_paravalue
</UL>

<P><STRONG><a name="[1f3]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLoadVoltageBuff
</UL>

<P><STRONG><a name="[19c]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[195]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[199]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hist_detail
</UL>

<P><STRONG><a name="[19d]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[3d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19e]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[198]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[17d]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
